declare const HTMLElement: {
    new (): HTMLElement;
    prototype: HTMLElement;
};
export declare class TabContainerChangeEvent extends Event {
    #private;
    constructor(type: string, { tab, panel, ...init }: EventInit & {
        tab?: Element;
        panel?: Element;
    });
    get detail(): {
        relatedTarget: Element | null;
    };
    get panel(): Element | null;
    get tab(): Element | null;
}
export declare class TabContainerElement extends HTMLElement {
    #private;
    static define(tag?: string, registry?: CustomElementRegistry): typeof TabContainerElement;
    get onTabContainerChange(): ((event: TabContainerChangeEvent) => void) | null;
    set onTabContainerChange(listener: ((event: TabContainerChangeEvent) => void) | null);
    get onTabContainerChanged(): ((event: TabContainerChangeEvent) => void) | null;
    set onTabContainerChanged(listener: ((event: TabContainerChangeEvent) => void) | null);
    connectedCallback(): void;
    selectTab(index: number): void;
}
export {};
